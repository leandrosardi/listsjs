listsJs = {
    // events when the user add or remove a value
    events: {},

    version: '1.0.0',

    uuidv4: function() {
        return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
          (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
        );
    },

    items_count: function(parent) {
        // get the .div-export-lists inside the parent element
        let div = $(parent).find('.div-export-lists');
        // get the li elements
        let li = $(div).find('li');
        // return the number of li elements
        return li.length;
    },

    check_item: function(parent, id) {
        // get the .div-export-lists inside the parent element
        let div = $(parent).find('.div-export-lists');
        // get the li element
        let li = $(div).find('li[data-id-export-list="'+id+'"]');
        // add the item to the list
        $(li).attr('data-belonging', 'true');
        $(li).find('i').attr('class', 'icon-check');
        $(li).find('i').attr('style', 'color: green');
    },

    uncheck_item: function(parent, id) {
        // get the .div-export-lists inside the parent element
        let div = $(parent).find('.div-export-lists');
        // get the li element
        let li = $(div).find('li[data-id-export-list="'+id+'"]');
        // remove the item from the list
        $(li).attr('data-belonging', 'false');
        $(li).find('i').attr('class', 'icon-check-empty');
        $(li).find('i').attr('style', 'color: gray');
    },

    set_loading: function(parent, b) {
        // get the .div-export-lists inside the parent element
        let div = $(parent).find('.div-export-lists');
        if (b) {
            // remove all li items
            listsJs.remove_all(parent);
            // add the loading icon
            let li = document.createElement('li');
            li.setAttribute('class', 'loading');
            li.setAttribute('style', 'color: gray; margin-left: 10px');
            li.innerHTML = ' Loading...';
            div.append(li);
        } else {
            // remove the loading li
            $(div).find('li.loading').remove();
        }
    },
    
    add_item: function(parent, h, opacity='1.0') {
        // get the .div-export-lists inside the parent element
        let div = $(parent).find('.div-export-lists');
        let list_id = $(div).attr('data-id-lead');
        // create the li element, with hand cursor
        let li = document.createElement('li');
        li.setAttribute('data-id-export-list', h.id);
        li.setAttribute('data-id-lead', list_id);
        li.setAttribute('data-name', h.name);
        li.setAttribute('data-belonging', h.checked);
        li.style.cursor = 'pointer';
        li.style.opacity = opacity;
        // create an icon-ok element, with style green text color
        let icon = document.createElement('i');
        icon.setAttribute('data-id-export-list', h.id);
        icon.setAttribute('data-id-lead', list_id);
        if ( h.checked ) { 
            icon.setAttribute('style', 'color: green');
            icon.setAttribute('class', 'icon-check');
        } else {
            icon.setAttribute('style', 'color: gray');
            icon.setAttribute('class', 'icon-check-empty');
        }
        // add the icon and the name of the list to the anchor
        li.appendChild(icon);
        li.appendChild(document.createTextNode(' '));
        li.appendChild(document.createTextNode(h.name));
        // if the export is deleted, then add a "deleted" label
        if (h.deleted === true) {
            o = document.createTextNode(' (deleted)')
            o.class = 'deleted'
            $(li).append(o);
            $(li).attr('data-deleted', true)
        } else {
            $(li).attr('data-deleted', false)
        }
        // add the li to the ul
        $(div).append(li);
        // catch the click event on the li element
        li.addEventListener('click', function(e) {
            // if the item is checked
            if ( $(this).attr('data-belonging') === 'true' || $(this).attr('data-belonging') === true ) {
                // if it is defined the function on_check_item
                if (listsJs.events[parent.id+".on_uncheck_item"]) {
                    // set item opacity
                    listsJs.set_item_opacity(parent, h.id, '0.5');
                    // call the function
                    if (listsJs.events[parent.id+".on_uncheck_item"](h)) {
                        listsJs.uncheck_item(parent, h.id);
                    } else {
                        // nothing to do here
                    }
                    // set item opacity
                    listsJs.set_item_opacity(parent, h.id, '1');
                } else {
                    listsJs.uncheck_item(parent, h.id);
                }
            } else {
                // if it is defined the function on_check_item
                if (listsJs.events[parent.id+".on_check_item"]) {
                    // set item opacity
                    listsJs.set_item_opacity(parent, h.id, '0.5');
                    // call the function
                    if (listsJs.events[parent.id+".on_check_item"](h)) {
                        listsJs.check_item(parent, h.id);
                    } else {
                        // nothing to do here
                    }
                    // set item opacity
                    listsJs.set_item_opacity(parent, h.id, '1');
                } else {
                    listsJs.check_item(parent, h.id);
                }
            }
            // JavaScript, stop additional event listeners
            // reference: https://www.w3schools.com/jsref/event_stopimmediatepropagation.asp
            e.stopImmediatePropagation();
        });
    },

    remove_item: function(parent, id) {
        // get the .div-export-lists inside the parent element
        let div = $(parent).find('.div-export-lists');
        // get the li element
        let li = $(div).find('li[data-id-export-list="'+id+'"]');
        // remove the li element
        $(li).remove();
    },

    set_item_opacity: function(parent, id, opacity) {
        // get the .div-export-lists inside the parent element
        let div = $(parent).find('.div-export-lists');
        // get the li element
        let li = $(div).find('li[data-id-export-list="'+id+'"]');
        // change li opacity
        $(li).css('opacity', opacity);
    },
    /*
    set_item_deleted: function(parent, id, b) {
        // get the .div-export-lists inside the parent element
        let div = $(parent).find('.div-export-lists');
        // get the li element
        let li = $(div).find('li[data-id-export-list="'+id+'"]');
        // if the export is deleted, then add a "deleted" label
        if (b) {
            o = document.createTextNode(' (deleted)')
            o.class = 'deleted'
            $(li).append(o);
            $(li).attr('data-deleted', true)
        } else {
            // remove the .deleted element
            $(li).find('.deleted').remove();
            $(li).attr('data-deleted', false)
        }
    },
    */
    remove_all: function(parent) {
        // get the .div-export-lists inside the parent element
        let div = $(parent).find('.div-export-lists');
        // remove all the li elements
        $(div).empty();
    },

    add_item_from_input: function(parent) {
        // get the .div-export-lists inside the parent element
        let div = $(parent).find('.div-export-lists');
        // get the input element
        o = $(parent).find('.input-export-lists');
        // create new item descriptor
        let h = {
            id: listsJs.uuidv4(),
            name: $(o).val().toString(),
            checked: true
        };
        // if it is defined the function on_check_item
        if (listsJs.events[parent.id+".on_add_item"]) {
            // call the function
            id = listsJs.events[parent.id+".on_add_item"](h);
            if (id != null) {
                h.id = id;
                listsJs.add_item(parent, h);
            } else {
                // nothing to do here
            }
        } else {
            listsJs.add_item(parent, h);
        }
    },

    disable_add_button: function(parent) {
        // disabling "add to list" button while loading list with AJAX
        let b = $(parent).find('.btn-create-export-list');
        $(b).attr('disabled', 'disabled');
    },

    enable_add_button: function(parent) {
        let b = $(parent).find('.btn-create-export-list');
        let t = $(parent).find('.input-export-lists');
        // enable only if the input is not empty
        if ($(t).val().toString().trim() != '') {
            $(b).removeAttr('disabled');
        }
    },

    disable_add_input: function(parent) {
        let t = $(parent).find('.input-export-lists');
        $(t).attr('disabled', 'disabled');
    },

    enable_add_input: function(parent) {
        let t = $(parent).find('.input-export-lists');
        $(t).removeAttr('disabled');
    },

    draw: function(parent, h) {
        // draw the widget into the parent element
        let s = 
            "<div class='btn-group'> " +
            "  <button class='btn btn-"+h.color+" dropdown-toggle btn-export-lists' data-id-lead='"+h.id+"' data-toggle='dropdown'><span class='caption'>"+h.caption+"</span> <span class='caret'></span></button> " +
            "  <ul class='dropdown-menu ul-export-lists' data-id-lead='"+h.id+"'> " +
            "    <div class='div-export-lists' data-id-lead='"+h.id+"'> " +
            "      <!-- fill the div by AJAX when the user clicks on the export button --> " +
            "    </div> " +
            "    <li class='divider'></li> " +
            "    <li> " +
            "      <p>Create New List</p> " +
            "      <input class='input input-medium input-export-lists' data-id-lead='"+h.color+"' /><br/> " +
            "      <button class='btn btn-link btn-create-export-list' data-id-lead='"+h.color+"'><i class='icon-plus'></i> Add</button> " +
            "    </li> " +
            "  </ul> " +
            "</div> ";
        let o = $.parseHTML(s);
        // disable .btn-create-export-list
        $(o).find('.btn-create-export-list').attr('disabled', 'disabled');
        // enable/disable .btn-create-export-list when the user types in the input .input-export-lists
        t = $(o).find('.input-export-lists');
        t.click(function(e) {
            // JavaScript, stop additional event listeners
            // reference: https://www.w3schools.com/jsref/event_stopimmediatepropagation.asp
            e.stopImmediatePropagation();
        });
        // set the focus on the input .input-export-lists, when the dropdown list is opened
        $(o).find('.btn-export-lists').on('mouseup', function(e) {
            // if it is defined the function on_expand
            if (listsJs.events[parent.id+".on_expand"]) {
                // call the function
                listsJs.events[parent.id+".on_expand"]();
            }
            setTimeout(function() {
                $(o).find('.input-export-lists').focus();
            }, 500);
        });
        // select all text when the input .input-export-lists is focused
        $(o).find('.input-export-lists').on('focus', function(e) {
            this.select();
        });
        // close the dropdown list when press ESCAPE
        $(o).keydown(function(e) {
            if (e.keyCode == 27) {
                $(o).find('.btn-export-lists').dropdown('toggle');
                // JavaScript, stop additional event listeners
                // reference: https://www.w3schools.com/jsref/event_stopimmediatepropagation.asp
                e.stopImmediatePropagation();
            }
        });
        // 
        t.keyup(function(e) {
            if ($(this).val().toString() != '') {
                listsJs.enable_add_button(parent);            
            } else {
                listsJs.disable_add_button(parent);            
                // JavaScript, stop additional event listeners
                // reference: https://www.w3schools.com/jsref/event_stopimmediatepropagation.asp
                e.stopImmediatePropagation();
            }    
            // if the key pressed is ENTER
            if (e.keyCode == 13) {
                listsJs.add_item_from_input(parent);
            } else {
                // JavaScript, stop additional event listeners
                // reference: https://www.w3schools.com/jsref/event_stopimmediatepropagation.asp
                e.stopImmediatePropagation();
            }
        });
        // 
        $(o).find('.btn-create-export-list').click(function(e) {
            listsJs.add_item_from_input(parent);
            // JavaScript, stop additional event listeners
            // reference: https://www.w3schools.com/jsref/event_stopimmediatepropagation.asp
            //e.stopImmediatePropagation();
        });
        // add the widget to the parent element
        $(parent).append(o);
        // iterate the lists array into the h object
        $.each(h['lists'], function(i, v) {
            listsJs.add_item(parent, v);
        });  
        // events
        // store function to trigger when the user adds a value
        if (h['on_check_item'] != null) {
            listsJs.events[parent.id+".on_check_item"] = h['on_check_item'];
        }
        if (h['on_uncheck_item'] != null) {
            listsJs.events[parent.id+".on_uncheck_item"] = h['on_uncheck_item'];
        }
        if (h['on_add_item'] != null) {
            listsJs.events[parent.id+".on_add_item"] = h['on_add_item'];
        }
        if (h['on_expand'] != null) {
            listsJs.events[parent.id+".on_expand"] = h['on_expand'];
        }
    }
};